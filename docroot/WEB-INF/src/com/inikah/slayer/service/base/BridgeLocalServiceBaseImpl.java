/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inikah.slayer.service.base;

import com.inikah.slayer.service.BridgeLocalService;
import com.inikah.slayer.service.persistence.MMCityPersistence;
import com.inikah.slayer.service.persistence.MMRegionPersistence;
import com.inikah.slayer.service.persistence.ProfilePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.InfrastructureUtil;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.persistence.CountryPersistence;
import com.liferay.portal.service.persistence.ListTypePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bridge local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.inikah.slayer.service.impl.BridgeLocalServiceImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see com.inikah.slayer.service.impl.BridgeLocalServiceImpl
 * @see com.inikah.slayer.service.BridgeLocalServiceUtil
 * @generated
 */
public abstract class BridgeLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements BridgeLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.inikah.slayer.service.BridgeLocalServiceUtil} to access the bridge local service.
	 */

	/**
	 * Returns the bridge local service.
	 *
	 * @return the bridge local service
	 */
	public com.inikah.slayer.service.BridgeLocalService getBridgeLocalService() {
		return bridgeLocalService;
	}

	/**
	 * Sets the bridge local service.
	 *
	 * @param bridgeLocalService the bridge local service
	 */
	public void setBridgeLocalService(
		com.inikah.slayer.service.BridgeLocalService bridgeLocalService) {
		this.bridgeLocalService = bridgeLocalService;
	}

	/**
	 * Returns the bridge remote service.
	 *
	 * @return the bridge remote service
	 */
	public com.inikah.slayer.service.BridgeService getBridgeService() {
		return bridgeService;
	}

	/**
	 * Sets the bridge remote service.
	 *
	 * @param bridgeService the bridge remote service
	 */
	public void setBridgeService(
		com.inikah.slayer.service.BridgeService bridgeService) {
		this.bridgeService = bridgeService;
	}

	/**
	 * Returns the m m city local service.
	 *
	 * @return the m m city local service
	 */
	public com.inikah.slayer.service.MMCityLocalService getMMCityLocalService() {
		return mmCityLocalService;
	}

	/**
	 * Sets the m m city local service.
	 *
	 * @param mmCityLocalService the m m city local service
	 */
	public void setMMCityLocalService(
		com.inikah.slayer.service.MMCityLocalService mmCityLocalService) {
		this.mmCityLocalService = mmCityLocalService;
	}

	/**
	 * Returns the m m city remote service.
	 *
	 * @return the m m city remote service
	 */
	public com.inikah.slayer.service.MMCityService getMMCityService() {
		return mmCityService;
	}

	/**
	 * Sets the m m city remote service.
	 *
	 * @param mmCityService the m m city remote service
	 */
	public void setMMCityService(
		com.inikah.slayer.service.MMCityService mmCityService) {
		this.mmCityService = mmCityService;
	}

	/**
	 * Returns the m m city persistence.
	 *
	 * @return the m m city persistence
	 */
	public MMCityPersistence getMMCityPersistence() {
		return mmCityPersistence;
	}

	/**
	 * Sets the m m city persistence.
	 *
	 * @param mmCityPersistence the m m city persistence
	 */
	public void setMMCityPersistence(MMCityPersistence mmCityPersistence) {
		this.mmCityPersistence = mmCityPersistence;
	}

	/**
	 * Returns the m m region local service.
	 *
	 * @return the m m region local service
	 */
	public com.inikah.slayer.service.MMRegionLocalService getMMRegionLocalService() {
		return mmRegionLocalService;
	}

	/**
	 * Sets the m m region local service.
	 *
	 * @param mmRegionLocalService the m m region local service
	 */
	public void setMMRegionLocalService(
		com.inikah.slayer.service.MMRegionLocalService mmRegionLocalService) {
		this.mmRegionLocalService = mmRegionLocalService;
	}

	/**
	 * Returns the m m region remote service.
	 *
	 * @return the m m region remote service
	 */
	public com.inikah.slayer.service.MMRegionService getMMRegionService() {
		return mmRegionService;
	}

	/**
	 * Sets the m m region remote service.
	 *
	 * @param mmRegionService the m m region remote service
	 */
	public void setMMRegionService(
		com.inikah.slayer.service.MMRegionService mmRegionService) {
		this.mmRegionService = mmRegionService;
	}

	/**
	 * Returns the m m region persistence.
	 *
	 * @return the m m region persistence
	 */
	public MMRegionPersistence getMMRegionPersistence() {
		return mmRegionPersistence;
	}

	/**
	 * Sets the m m region persistence.
	 *
	 * @param mmRegionPersistence the m m region persistence
	 */
	public void setMMRegionPersistence(MMRegionPersistence mmRegionPersistence) {
		this.mmRegionPersistence = mmRegionPersistence;
	}

	/**
	 * Returns the profile local service.
	 *
	 * @return the profile local service
	 */
	public com.inikah.slayer.service.ProfileLocalService getProfileLocalService() {
		return profileLocalService;
	}

	/**
	 * Sets the profile local service.
	 *
	 * @param profileLocalService the profile local service
	 */
	public void setProfileLocalService(
		com.inikah.slayer.service.ProfileLocalService profileLocalService) {
		this.profileLocalService = profileLocalService;
	}

	/**
	 * Returns the profile remote service.
	 *
	 * @return the profile remote service
	 */
	public com.inikah.slayer.service.ProfileService getProfileService() {
		return profileService;
	}

	/**
	 * Sets the profile remote service.
	 *
	 * @param profileService the profile remote service
	 */
	public void setProfileService(
		com.inikah.slayer.service.ProfileService profileService) {
		this.profileService = profileService;
	}

	/**
	 * Returns the profile persistence.
	 *
	 * @return the profile persistence
	 */
	public ProfilePersistence getProfilePersistence() {
		return profilePersistence;
	}

	/**
	 * Sets the profile persistence.
	 *
	 * @param profilePersistence the profile persistence
	 */
	public void setProfilePersistence(ProfilePersistence profilePersistence) {
		this.profilePersistence = profilePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the country remote service.
	 *
	 * @return the country remote service
	 */
	public com.liferay.portal.service.CountryService getCountryService() {
		return countryService;
	}

	/**
	 * Sets the country remote service.
	 *
	 * @param countryService the country remote service
	 */
	public void setCountryService(
		com.liferay.portal.service.CountryService countryService) {
		this.countryService = countryService;
	}

	/**
	 * Returns the country persistence.
	 *
	 * @return the country persistence
	 */
	public CountryPersistence getCountryPersistence() {
		return countryPersistence;
	}

	/**
	 * Sets the country persistence.
	 *
	 * @param countryPersistence the country persistence
	 */
	public void setCountryPersistence(CountryPersistence countryPersistence) {
		this.countryPersistence = countryPersistence;
	}

	/**
	 * Returns the list type remote service.
	 *
	 * @return the list type remote service
	 */
	public com.liferay.portal.service.ListTypeService getListTypeService() {
		return listTypeService;
	}

	/**
	 * Sets the list type remote service.
	 *
	 * @param listTypeService the list type remote service
	 */
	public void setListTypeService(
		com.liferay.portal.service.ListTypeService listTypeService) {
		this.listTypeService = listTypeService;
	}

	/**
	 * Returns the list type persistence.
	 *
	 * @return the list type persistence
	 */
	public ListTypePersistence getListTypePersistence() {
		return listTypePersistence;
	}

	/**
	 * Sets the list type persistence.
	 *
	 * @param listTypePersistence the list type persistence
	 */
	public void setListTypePersistence(ListTypePersistence listTypePersistence) {
		this.listTypePersistence = listTypePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = InfrastructureUtil.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.inikah.slayer.service.BridgeLocalService.class)
	protected com.inikah.slayer.service.BridgeLocalService bridgeLocalService;
	@BeanReference(type = com.inikah.slayer.service.BridgeService.class)
	protected com.inikah.slayer.service.BridgeService bridgeService;
	@BeanReference(type = com.inikah.slayer.service.MMCityLocalService.class)
	protected com.inikah.slayer.service.MMCityLocalService mmCityLocalService;
	@BeanReference(type = com.inikah.slayer.service.MMCityService.class)
	protected com.inikah.slayer.service.MMCityService mmCityService;
	@BeanReference(type = MMCityPersistence.class)
	protected MMCityPersistence mmCityPersistence;
	@BeanReference(type = com.inikah.slayer.service.MMRegionLocalService.class)
	protected com.inikah.slayer.service.MMRegionLocalService mmRegionLocalService;
	@BeanReference(type = com.inikah.slayer.service.MMRegionService.class)
	protected com.inikah.slayer.service.MMRegionService mmRegionService;
	@BeanReference(type = MMRegionPersistence.class)
	protected MMRegionPersistence mmRegionPersistence;
	@BeanReference(type = com.inikah.slayer.service.ProfileLocalService.class)
	protected com.inikah.slayer.service.ProfileLocalService profileLocalService;
	@BeanReference(type = com.inikah.slayer.service.ProfileService.class)
	protected com.inikah.slayer.service.ProfileService profileService;
	@BeanReference(type = ProfilePersistence.class)
	protected ProfilePersistence profilePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.CountryService.class)
	protected com.liferay.portal.service.CountryService countryService;
	@BeanReference(type = CountryPersistence.class)
	protected CountryPersistence countryPersistence;
	@BeanReference(type = com.liferay.portal.service.ListTypeService.class)
	protected com.liferay.portal.service.ListTypeService listTypeService;
	@BeanReference(type = ListTypePersistence.class)
	protected ListTypePersistence listTypePersistence;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BridgeLocalServiceClpInvoker _clpInvoker = new BridgeLocalServiceClpInvoker();
}