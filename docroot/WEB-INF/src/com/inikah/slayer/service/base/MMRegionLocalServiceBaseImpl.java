/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inikah.slayer.service.base;

import com.inikah.slayer.model.MMRegion;
import com.inikah.slayer.service.MMRegionLocalService;
import com.inikah.slayer.service.persistence.MMCityPersistence;
import com.inikah.slayer.service.persistence.MMRegionPersistence;
import com.inikah.slayer.service.persistence.ProfilePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the m m region local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.inikah.slayer.service.impl.MMRegionLocalServiceImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see com.inikah.slayer.service.impl.MMRegionLocalServiceImpl
 * @see com.inikah.slayer.service.MMRegionLocalServiceUtil
 * @generated
 */
public abstract class MMRegionLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements MMRegionLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.inikah.slayer.service.MMRegionLocalServiceUtil} to access the m m region local service.
	 */

	/**
	 * Adds the m m region to the database. Also notifies the appropriate model listeners.
	 *
	 * @param mmRegion the m m region
	 * @return the m m region that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MMRegion addMMRegion(MMRegion mmRegion) throws SystemException {
		mmRegion.setNew(true);

		return mmRegionPersistence.update(mmRegion);
	}

	/**
	 * Creates a new m m region with the primary key. Does not add the m m region to the database.
	 *
	 * @param regionId the primary key for the new m m region
	 * @return the new m m region
	 */
	@Override
	public MMRegion createMMRegion(long regionId) {
		return mmRegionPersistence.create(regionId);
	}

	/**
	 * Deletes the m m region with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param regionId the primary key of the m m region
	 * @return the m m region that was removed
	 * @throws PortalException if a m m region with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MMRegion deleteMMRegion(long regionId)
		throws PortalException, SystemException {
		return mmRegionPersistence.remove(regionId);
	}

	/**
	 * Deletes the m m region from the database. Also notifies the appropriate model listeners.
	 *
	 * @param mmRegion the m m region
	 * @return the m m region that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MMRegion deleteMMRegion(MMRegion mmRegion) throws SystemException {
		return mmRegionPersistence.remove(mmRegion);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(MMRegion.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return mmRegionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.inikah.slayer.model.impl.MMRegionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return mmRegionPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.inikah.slayer.model.impl.MMRegionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return mmRegionPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return mmRegionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return mmRegionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public MMRegion fetchMMRegion(long regionId) throws SystemException {
		return mmRegionPersistence.fetchByPrimaryKey(regionId);
	}

	/**
	 * Returns the m m region with the primary key.
	 *
	 * @param regionId the primary key of the m m region
	 * @return the m m region
	 * @throws PortalException if a m m region with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public MMRegion getMMRegion(long regionId)
		throws PortalException, SystemException {
		return mmRegionPersistence.findByPrimaryKey(regionId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return mmRegionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the m m regions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.inikah.slayer.model.impl.MMRegionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of m m regions
	 * @param end the upper bound of the range of m m regions (not inclusive)
	 * @return the range of m m regions
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<MMRegion> getMMRegions(int start, int end)
		throws SystemException {
		return mmRegionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of m m regions.
	 *
	 * @return the number of m m regions
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getMMRegionsCount() throws SystemException {
		return mmRegionPersistence.countAll();
	}

	/**
	 * Updates the m m region in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param mmRegion the m m region
	 * @return the m m region that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MMRegion updateMMRegion(MMRegion mmRegion) throws SystemException {
		return mmRegionPersistence.update(mmRegion);
	}

	/**
	 * Returns the bridge remote service.
	 *
	 * @return the bridge remote service
	 */
	public com.inikah.slayer.service.BridgeService getBridgeService() {
		return bridgeService;
	}

	/**
	 * Sets the bridge remote service.
	 *
	 * @param bridgeService the bridge remote service
	 */
	public void setBridgeService(
		com.inikah.slayer.service.BridgeService bridgeService) {
		this.bridgeService = bridgeService;
	}

	/**
	 * Returns the m m city local service.
	 *
	 * @return the m m city local service
	 */
	public com.inikah.slayer.service.MMCityLocalService getMMCityLocalService() {
		return mmCityLocalService;
	}

	/**
	 * Sets the m m city local service.
	 *
	 * @param mmCityLocalService the m m city local service
	 */
	public void setMMCityLocalService(
		com.inikah.slayer.service.MMCityLocalService mmCityLocalService) {
		this.mmCityLocalService = mmCityLocalService;
	}

	/**
	 * Returns the m m city remote service.
	 *
	 * @return the m m city remote service
	 */
	public com.inikah.slayer.service.MMCityService getMMCityService() {
		return mmCityService;
	}

	/**
	 * Sets the m m city remote service.
	 *
	 * @param mmCityService the m m city remote service
	 */
	public void setMMCityService(
		com.inikah.slayer.service.MMCityService mmCityService) {
		this.mmCityService = mmCityService;
	}

	/**
	 * Returns the m m city persistence.
	 *
	 * @return the m m city persistence
	 */
	public MMCityPersistence getMMCityPersistence() {
		return mmCityPersistence;
	}

	/**
	 * Sets the m m city persistence.
	 *
	 * @param mmCityPersistence the m m city persistence
	 */
	public void setMMCityPersistence(MMCityPersistence mmCityPersistence) {
		this.mmCityPersistence = mmCityPersistence;
	}

	/**
	 * Returns the m m region local service.
	 *
	 * @return the m m region local service
	 */
	public com.inikah.slayer.service.MMRegionLocalService getMMRegionLocalService() {
		return mmRegionLocalService;
	}

	/**
	 * Sets the m m region local service.
	 *
	 * @param mmRegionLocalService the m m region local service
	 */
	public void setMMRegionLocalService(
		com.inikah.slayer.service.MMRegionLocalService mmRegionLocalService) {
		this.mmRegionLocalService = mmRegionLocalService;
	}

	/**
	 * Returns the m m region remote service.
	 *
	 * @return the m m region remote service
	 */
	public com.inikah.slayer.service.MMRegionService getMMRegionService() {
		return mmRegionService;
	}

	/**
	 * Sets the m m region remote service.
	 *
	 * @param mmRegionService the m m region remote service
	 */
	public void setMMRegionService(
		com.inikah.slayer.service.MMRegionService mmRegionService) {
		this.mmRegionService = mmRegionService;
	}

	/**
	 * Returns the m m region persistence.
	 *
	 * @return the m m region persistence
	 */
	public MMRegionPersistence getMMRegionPersistence() {
		return mmRegionPersistence;
	}

	/**
	 * Sets the m m region persistence.
	 *
	 * @param mmRegionPersistence the m m region persistence
	 */
	public void setMMRegionPersistence(MMRegionPersistence mmRegionPersistence) {
		this.mmRegionPersistence = mmRegionPersistence;
	}

	/**
	 * Returns the profile local service.
	 *
	 * @return the profile local service
	 */
	public com.inikah.slayer.service.ProfileLocalService getProfileLocalService() {
		return profileLocalService;
	}

	/**
	 * Sets the profile local service.
	 *
	 * @param profileLocalService the profile local service
	 */
	public void setProfileLocalService(
		com.inikah.slayer.service.ProfileLocalService profileLocalService) {
		this.profileLocalService = profileLocalService;
	}

	/**
	 * Returns the profile remote service.
	 *
	 * @return the profile remote service
	 */
	public com.inikah.slayer.service.ProfileService getProfileService() {
		return profileService;
	}

	/**
	 * Sets the profile remote service.
	 *
	 * @param profileService the profile remote service
	 */
	public void setProfileService(
		com.inikah.slayer.service.ProfileService profileService) {
		this.profileService = profileService;
	}

	/**
	 * Returns the profile persistence.
	 *
	 * @return the profile persistence
	 */
	public ProfilePersistence getProfilePersistence() {
		return profilePersistence;
	}

	/**
	 * Sets the profile persistence.
	 *
	 * @param profilePersistence the profile persistence
	 */
	public void setProfilePersistence(ProfilePersistence profilePersistence) {
		this.profilePersistence = profilePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.inikah.slayer.model.MMRegion",
			mmRegionLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.inikah.slayer.model.MMRegion");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return MMRegion.class;
	}

	protected String getModelClassName() {
		return MMRegion.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = mmRegionPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.inikah.slayer.service.BridgeService.class)
	protected com.inikah.slayer.service.BridgeService bridgeService;
	@BeanReference(type = com.inikah.slayer.service.MMCityLocalService.class)
	protected com.inikah.slayer.service.MMCityLocalService mmCityLocalService;
	@BeanReference(type = com.inikah.slayer.service.MMCityService.class)
	protected com.inikah.slayer.service.MMCityService mmCityService;
	@BeanReference(type = MMCityPersistence.class)
	protected MMCityPersistence mmCityPersistence;
	@BeanReference(type = com.inikah.slayer.service.MMRegionLocalService.class)
	protected com.inikah.slayer.service.MMRegionLocalService mmRegionLocalService;
	@BeanReference(type = com.inikah.slayer.service.MMRegionService.class)
	protected com.inikah.slayer.service.MMRegionService mmRegionService;
	@BeanReference(type = MMRegionPersistence.class)
	protected MMRegionPersistence mmRegionPersistence;
	@BeanReference(type = com.inikah.slayer.service.ProfileLocalService.class)
	protected com.inikah.slayer.service.ProfileLocalService profileLocalService;
	@BeanReference(type = com.inikah.slayer.service.ProfileService.class)
	protected com.inikah.slayer.service.ProfileService profileService;
	@BeanReference(type = ProfilePersistence.class)
	protected ProfilePersistence profilePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private MMRegionLocalServiceClpInvoker _clpInvoker = new MMRegionLocalServiceClpInvoker();
}