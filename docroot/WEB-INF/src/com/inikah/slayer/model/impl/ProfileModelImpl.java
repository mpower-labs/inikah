/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inikah.slayer.model.impl;

import com.inikah.slayer.model.Profile;
import com.inikah.slayer.model.ProfileModel;
import com.inikah.slayer.model.ProfileSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Profile service. Represents a row in the &quot;inikah_Profile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.inikah.slayer.model.ProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProfileImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see ProfileImpl
 * @see com.inikah.slayer.model.Profile
 * @see com.inikah.slayer.model.ProfileModel
 * @generated
 */
@JSON(strict = true)
public class ProfileModelImpl extends BaseModelImpl<Profile>
	implements ProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile model instance should use the {@link com.inikah.slayer.model.Profile} interface instead.
	 */
	public static final String TABLE_NAME = "inikah_Profile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "profileId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "groupId", Types.BIGINT },
			{ "ownerLastLogin", Types.TIMESTAMP },
			{ "createdFor", Types.INTEGER },
			{ "profileName", Types.VARCHAR },
			{ "profileCode", Types.VARCHAR },
			{ "bride", Types.BOOLEAN },
			{ "maritalStatus", Types.INTEGER },
			{ "bornOn", Types.INTEGER },
			{ "reMarriageReasons", Types.VARCHAR },
			{ "hasChildren", Types.BOOLEAN },
			{ "sons", Types.INTEGER },
			{ "daughters", Types.INTEGER },
			{ "height", Types.INTEGER },
			{ "weight", Types.INTEGER },
			{ "complexion", Types.INTEGER },
			{ "motherTongue", Types.INTEGER },
			{ "emailAddress", Types.VARCHAR },
			{ "phone1", Types.VARCHAR },
			{ "phone2", Types.VARCHAR },
			{ "residingCountry", Types.BIGINT },
			{ "residingState", Types.BIGINT },
			{ "residingCity", Types.BIGINT },
			{ "residingArea", Types.VARCHAR },
			{ "nearbyMasjid", Types.VARCHAR },
			{ "education", Types.INTEGER },
			{ "educationDetail", Types.VARCHAR },
			{ "religiousEducation", Types.INTEGER },
			{ "religiousEducationDetail", Types.VARCHAR },
			{ "profession", Types.INTEGER },
			{ "professionDetail", Types.VARCHAR },
			{ "organization", Types.VARCHAR },
			{ "currency_", Types.INTEGER },
			{ "monthlyIncome", Types.INTEGER },
			{ "countryOfBirth", Types.BIGINT },
			{ "stateOfBirth", Types.BIGINT },
			{ "cityOfBirth", Types.BIGINT },
			{ "community", Types.INTEGER },
			{ "ethnicity", Types.INTEGER },
			{ "canSpeak", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "expectation", Types.VARCHAR },
			{ "hobbies", Types.VARCHAR },
			{ "physicallyChallenged", Types.BOOLEAN },
			{ "physicallyChallengedDetails", Types.VARCHAR },
			{ "performedHaj", Types.BOOLEAN },
			{ "revertedToIslam", Types.BOOLEAN },
			{ "muslimSince", Types.INTEGER },
			{ "hasNoFather", Types.BOOLEAN },
			{ "hasNoMother", Types.BOOLEAN },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table inikah_Profile (profileId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,groupId LONG,ownerLastLogin DATE null,createdFor INTEGER,profileName VARCHAR(75) null,profileCode VARCHAR(75) null,bride BOOLEAN,maritalStatus INTEGER,bornOn INTEGER,reMarriageReasons VARCHAR(75) null,hasChildren BOOLEAN,sons INTEGER,daughters INTEGER,height INTEGER,weight INTEGER,complexion INTEGER,motherTongue INTEGER,emailAddress VARCHAR(75) null,phone1 VARCHAR(75) null,phone2 VARCHAR(75) null,residingCountry LONG,residingState LONG,residingCity LONG,residingArea VARCHAR(75) null,nearbyMasjid VARCHAR(75) null,education INTEGER,educationDetail VARCHAR(75) null,religiousEducation INTEGER,religiousEducationDetail VARCHAR(75) null,profession INTEGER,professionDetail VARCHAR(75) null,organization VARCHAR(75) null,currency_ INTEGER,monthlyIncome INTEGER,countryOfBirth LONG,stateOfBirth LONG,cityOfBirth LONG,community INTEGER,ethnicity INTEGER,canSpeak VARCHAR(75) null,description VARCHAR(75) null,expectation VARCHAR(75) null,hobbies VARCHAR(75) null,physicallyChallenged BOOLEAN,physicallyChallengedDetails VARCHAR(75) null,performedHaj BOOLEAN,revertedToIslam BOOLEAN,muslimSince INTEGER,hasNoFather BOOLEAN,hasNoMother BOOLEAN,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table inikah_Profile";
	public static final String ORDER_BY_JPQL = " ORDER BY profile.profileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY inikah_Profile.profileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.inikah.slayer.model.Profile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.inikah.slayer.model.Profile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.inikah.slayer.model.Profile"),
			true);
	public static long EMAILADDRESS_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long PROFILEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Profile toModel(ProfileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Profile model = new ProfileImpl();

		model.setProfileId(soapModel.getProfileId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGroupId(soapModel.getGroupId());
		model.setOwnerLastLogin(soapModel.getOwnerLastLogin());
		model.setCreatedFor(soapModel.getCreatedFor());
		model.setProfileName(soapModel.getProfileName());
		model.setProfileCode(soapModel.getProfileCode());
		model.setBride(soapModel.getBride());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setBornOn(soapModel.getBornOn());
		model.setReMarriageReasons(soapModel.getReMarriageReasons());
		model.setHasChildren(soapModel.getHasChildren());
		model.setSons(soapModel.getSons());
		model.setDaughters(soapModel.getDaughters());
		model.setHeight(soapModel.getHeight());
		model.setWeight(soapModel.getWeight());
		model.setComplexion(soapModel.getComplexion());
		model.setMotherTongue(soapModel.getMotherTongue());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setPhone1(soapModel.getPhone1());
		model.setPhone2(soapModel.getPhone2());
		model.setResidingCountry(soapModel.getResidingCountry());
		model.setResidingState(soapModel.getResidingState());
		model.setResidingCity(soapModel.getResidingCity());
		model.setResidingArea(soapModel.getResidingArea());
		model.setNearbyMasjid(soapModel.getNearbyMasjid());
		model.setEducation(soapModel.getEducation());
		model.setEducationDetail(soapModel.getEducationDetail());
		model.setReligiousEducation(soapModel.getReligiousEducation());
		model.setReligiousEducationDetail(soapModel.getReligiousEducationDetail());
		model.setProfession(soapModel.getProfession());
		model.setProfessionDetail(soapModel.getProfessionDetail());
		model.setOrganization(soapModel.getOrganization());
		model.setCurrency(soapModel.getCurrency());
		model.setMonthlyIncome(soapModel.getMonthlyIncome());
		model.setCountryOfBirth(soapModel.getCountryOfBirth());
		model.setStateOfBirth(soapModel.getStateOfBirth());
		model.setCityOfBirth(soapModel.getCityOfBirth());
		model.setCommunity(soapModel.getCommunity());
		model.setEthnicity(soapModel.getEthnicity());
		model.setCanSpeak(soapModel.getCanSpeak());
		model.setDescription(soapModel.getDescription());
		model.setExpectation(soapModel.getExpectation());
		model.setHobbies(soapModel.getHobbies());
		model.setPhysicallyChallenged(soapModel.getPhysicallyChallenged());
		model.setPhysicallyChallengedDetails(soapModel.getPhysicallyChallengedDetails());
		model.setPerformedHaj(soapModel.getPerformedHaj());
		model.setRevertedToIslam(soapModel.getRevertedToIslam());
		model.setMuslimSince(soapModel.getMuslimSince());
		model.setHasNoFather(soapModel.getHasNoFather());
		model.setHasNoMother(soapModel.getHasNoMother());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Profile> toModels(ProfileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Profile> models = new ArrayList<Profile>(soapModels.length);

		for (ProfileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.inikah.slayer.model.Profile"));

	public ProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _profileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProfileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _profileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Profile.class;
	}

	@Override
	public String getModelClassName() {
		return Profile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("profileId", getProfileId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("groupId", getGroupId());
		attributes.put("ownerLastLogin", getOwnerLastLogin());
		attributes.put("createdFor", getCreatedFor());
		attributes.put("profileName", getProfileName());
		attributes.put("profileCode", getProfileCode());
		attributes.put("bride", getBride());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("bornOn", getBornOn());
		attributes.put("reMarriageReasons", getReMarriageReasons());
		attributes.put("hasChildren", getHasChildren());
		attributes.put("sons", getSons());
		attributes.put("daughters", getDaughters());
		attributes.put("height", getHeight());
		attributes.put("weight", getWeight());
		attributes.put("complexion", getComplexion());
		attributes.put("motherTongue", getMotherTongue());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("phone1", getPhone1());
		attributes.put("phone2", getPhone2());
		attributes.put("residingCountry", getResidingCountry());
		attributes.put("residingState", getResidingState());
		attributes.put("residingCity", getResidingCity());
		attributes.put("residingArea", getResidingArea());
		attributes.put("nearbyMasjid", getNearbyMasjid());
		attributes.put("education", getEducation());
		attributes.put("educationDetail", getEducationDetail());
		attributes.put("religiousEducation", getReligiousEducation());
		attributes.put("religiousEducationDetail", getReligiousEducationDetail());
		attributes.put("profession", getProfession());
		attributes.put("professionDetail", getProfessionDetail());
		attributes.put("organization", getOrganization());
		attributes.put("currency", getCurrency());
		attributes.put("monthlyIncome", getMonthlyIncome());
		attributes.put("countryOfBirth", getCountryOfBirth());
		attributes.put("stateOfBirth", getStateOfBirth());
		attributes.put("cityOfBirth", getCityOfBirth());
		attributes.put("community", getCommunity());
		attributes.put("ethnicity", getEthnicity());
		attributes.put("canSpeak", getCanSpeak());
		attributes.put("description", getDescription());
		attributes.put("expectation", getExpectation());
		attributes.put("hobbies", getHobbies());
		attributes.put("physicallyChallenged", getPhysicallyChallenged());
		attributes.put("physicallyChallengedDetails",
			getPhysicallyChallengedDetails());
		attributes.put("performedHaj", getPerformedHaj());
		attributes.put("revertedToIslam", getRevertedToIslam());
		attributes.put("muslimSince", getMuslimSince());
		attributes.put("hasNoFather", getHasNoFather());
		attributes.put("hasNoMother", getHasNoMother());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long profileId = (Long)attributes.get("profileId");

		if (profileId != null) {
			setProfileId(profileId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date ownerLastLogin = (Date)attributes.get("ownerLastLogin");

		if (ownerLastLogin != null) {
			setOwnerLastLogin(ownerLastLogin);
		}

		Integer createdFor = (Integer)attributes.get("createdFor");

		if (createdFor != null) {
			setCreatedFor(createdFor);
		}

		String profileName = (String)attributes.get("profileName");

		if (profileName != null) {
			setProfileName(profileName);
		}

		String profileCode = (String)attributes.get("profileCode");

		if (profileCode != null) {
			setProfileCode(profileCode);
		}

		Boolean bride = (Boolean)attributes.get("bride");

		if (bride != null) {
			setBride(bride);
		}

		Integer maritalStatus = (Integer)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		Integer bornOn = (Integer)attributes.get("bornOn");

		if (bornOn != null) {
			setBornOn(bornOn);
		}

		String reMarriageReasons = (String)attributes.get("reMarriageReasons");

		if (reMarriageReasons != null) {
			setReMarriageReasons(reMarriageReasons);
		}

		Boolean hasChildren = (Boolean)attributes.get("hasChildren");

		if (hasChildren != null) {
			setHasChildren(hasChildren);
		}

		Integer sons = (Integer)attributes.get("sons");

		if (sons != null) {
			setSons(sons);
		}

		Integer daughters = (Integer)attributes.get("daughters");

		if (daughters != null) {
			setDaughters(daughters);
		}

		Integer height = (Integer)attributes.get("height");

		if (height != null) {
			setHeight(height);
		}

		Integer weight = (Integer)attributes.get("weight");

		if (weight != null) {
			setWeight(weight);
		}

		Integer complexion = (Integer)attributes.get("complexion");

		if (complexion != null) {
			setComplexion(complexion);
		}

		Integer motherTongue = (Integer)attributes.get("motherTongue");

		if (motherTongue != null) {
			setMotherTongue(motherTongue);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String phone1 = (String)attributes.get("phone1");

		if (phone1 != null) {
			setPhone1(phone1);
		}

		String phone2 = (String)attributes.get("phone2");

		if (phone2 != null) {
			setPhone2(phone2);
		}

		Long residingCountry = (Long)attributes.get("residingCountry");

		if (residingCountry != null) {
			setResidingCountry(residingCountry);
		}

		Long residingState = (Long)attributes.get("residingState");

		if (residingState != null) {
			setResidingState(residingState);
		}

		Long residingCity = (Long)attributes.get("residingCity");

		if (residingCity != null) {
			setResidingCity(residingCity);
		}

		String residingArea = (String)attributes.get("residingArea");

		if (residingArea != null) {
			setResidingArea(residingArea);
		}

		String nearbyMasjid = (String)attributes.get("nearbyMasjid");

		if (nearbyMasjid != null) {
			setNearbyMasjid(nearbyMasjid);
		}

		Integer education = (Integer)attributes.get("education");

		if (education != null) {
			setEducation(education);
		}

		String educationDetail = (String)attributes.get("educationDetail");

		if (educationDetail != null) {
			setEducationDetail(educationDetail);
		}

		Integer religiousEducation = (Integer)attributes.get(
				"religiousEducation");

		if (religiousEducation != null) {
			setReligiousEducation(religiousEducation);
		}

		String religiousEducationDetail = (String)attributes.get(
				"religiousEducationDetail");

		if (religiousEducationDetail != null) {
			setReligiousEducationDetail(religiousEducationDetail);
		}

		Integer profession = (Integer)attributes.get("profession");

		if (profession != null) {
			setProfession(profession);
		}

		String professionDetail = (String)attributes.get("professionDetail");

		if (professionDetail != null) {
			setProfessionDetail(professionDetail);
		}

		String organization = (String)attributes.get("organization");

		if (organization != null) {
			setOrganization(organization);
		}

		Integer currency = (Integer)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		Integer monthlyIncome = (Integer)attributes.get("monthlyIncome");

		if (monthlyIncome != null) {
			setMonthlyIncome(monthlyIncome);
		}

		Long countryOfBirth = (Long)attributes.get("countryOfBirth");

		if (countryOfBirth != null) {
			setCountryOfBirth(countryOfBirth);
		}

		Long stateOfBirth = (Long)attributes.get("stateOfBirth");

		if (stateOfBirth != null) {
			setStateOfBirth(stateOfBirth);
		}

		Long cityOfBirth = (Long)attributes.get("cityOfBirth");

		if (cityOfBirth != null) {
			setCityOfBirth(cityOfBirth);
		}

		Integer community = (Integer)attributes.get("community");

		if (community != null) {
			setCommunity(community);
		}

		Integer ethnicity = (Integer)attributes.get("ethnicity");

		if (ethnicity != null) {
			setEthnicity(ethnicity);
		}

		String canSpeak = (String)attributes.get("canSpeak");

		if (canSpeak != null) {
			setCanSpeak(canSpeak);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String expectation = (String)attributes.get("expectation");

		if (expectation != null) {
			setExpectation(expectation);
		}

		String hobbies = (String)attributes.get("hobbies");

		if (hobbies != null) {
			setHobbies(hobbies);
		}

		Boolean physicallyChallenged = (Boolean)attributes.get(
				"physicallyChallenged");

		if (physicallyChallenged != null) {
			setPhysicallyChallenged(physicallyChallenged);
		}

		String physicallyChallengedDetails = (String)attributes.get(
				"physicallyChallengedDetails");

		if (physicallyChallengedDetails != null) {
			setPhysicallyChallengedDetails(physicallyChallengedDetails);
		}

		Boolean performedHaj = (Boolean)attributes.get("performedHaj");

		if (performedHaj != null) {
			setPerformedHaj(performedHaj);
		}

		Boolean revertedToIslam = (Boolean)attributes.get("revertedToIslam");

		if (revertedToIslam != null) {
			setRevertedToIslam(revertedToIslam);
		}

		Integer muslimSince = (Integer)attributes.get("muslimSince");

		if (muslimSince != null) {
			setMuslimSince(muslimSince);
		}

		Boolean hasNoFather = (Boolean)attributes.get("hasNoFather");

		if (hasNoFather != null) {
			setHasNoFather(hasNoFather);
		}

		Boolean hasNoMother = (Boolean)attributes.get("hasNoMother");

		if (hasNoMother != null) {
			setHasNoMother(hasNoMother);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getProfileId() {
		return _profileId;
	}

	@Override
	public void setProfileId(long profileId) {
		_profileId = profileId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getOwnerLastLogin() {
		return _ownerLastLogin;
	}

	@Override
	public void setOwnerLastLogin(Date ownerLastLogin) {
		_ownerLastLogin = ownerLastLogin;
	}

	@JSON
	@Override
	public int getCreatedFor() {
		return _createdFor;
	}

	@Override
	public void setCreatedFor(int createdFor) {
		_createdFor = createdFor;
	}

	@JSON
	@Override
	public String getProfileName() {
		if (_profileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _profileName;
		}
	}

	@Override
	public void setProfileName(String profileName) {
		_profileName = profileName;
	}

	@JSON
	@Override
	public String getProfileCode() {
		if (_profileCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _profileCode;
		}
	}

	@Override
	public void setProfileCode(String profileCode) {
		_profileCode = profileCode;
	}

	@JSON
	@Override
	public boolean getBride() {
		return _bride;
	}

	@Override
	public boolean isBride() {
		return _bride;
	}

	@Override
	public void setBride(boolean bride) {
		_bride = bride;
	}

	@JSON
	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public int getBornOn() {
		return _bornOn;
	}

	@Override
	public void setBornOn(int bornOn) {
		_bornOn = bornOn;
	}

	@JSON
	@Override
	public String getReMarriageReasons() {
		if (_reMarriageReasons == null) {
			return StringPool.BLANK;
		}
		else {
			return _reMarriageReasons;
		}
	}

	@Override
	public void setReMarriageReasons(String reMarriageReasons) {
		_reMarriageReasons = reMarriageReasons;
	}

	@JSON
	@Override
	public boolean getHasChildren() {
		return _hasChildren;
	}

	@Override
	public boolean isHasChildren() {
		return _hasChildren;
	}

	@Override
	public void setHasChildren(boolean hasChildren) {
		_hasChildren = hasChildren;
	}

	@JSON
	@Override
	public int getSons() {
		return _sons;
	}

	@Override
	public void setSons(int sons) {
		_sons = sons;
	}

	@JSON
	@Override
	public int getDaughters() {
		return _daughters;
	}

	@Override
	public void setDaughters(int daughters) {
		_daughters = daughters;
	}

	@JSON
	@Override
	public int getHeight() {
		return _height;
	}

	@Override
	public void setHeight(int height) {
		_height = height;
	}

	@JSON
	@Override
	public int getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(int weight) {
		_weight = weight;
	}

	@JSON
	@Override
	public int getComplexion() {
		return _complexion;
	}

	@Override
	public void setComplexion(int complexion) {
		_complexion = complexion;
	}

	@JSON
	@Override
	public int getMotherTongue() {
		return _motherTongue;
	}

	@Override
	public void setMotherTongue(int motherTongue) {
		_motherTongue = motherTongue;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@JSON
	@Override
	public String getPhone1() {
		if (_phone1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone1;
		}
	}

	@Override
	public void setPhone1(String phone1) {
		_phone1 = phone1;
	}

	@JSON
	@Override
	public String getPhone2() {
		if (_phone2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone2;
		}
	}

	@Override
	public void setPhone2(String phone2) {
		_phone2 = phone2;
	}

	@JSON
	@Override
	public long getResidingCountry() {
		return _residingCountry;
	}

	@Override
	public void setResidingCountry(long residingCountry) {
		_residingCountry = residingCountry;
	}

	@JSON
	@Override
	public long getResidingState() {
		return _residingState;
	}

	@Override
	public void setResidingState(long residingState) {
		_residingState = residingState;
	}

	@JSON
	@Override
	public long getResidingCity() {
		return _residingCity;
	}

	@Override
	public void setResidingCity(long residingCity) {
		_residingCity = residingCity;
	}

	@JSON
	@Override
	public String getResidingArea() {
		if (_residingArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _residingArea;
		}
	}

	@Override
	public void setResidingArea(String residingArea) {
		_residingArea = residingArea;
	}

	@JSON
	@Override
	public String getNearbyMasjid() {
		if (_nearbyMasjid == null) {
			return StringPool.BLANK;
		}
		else {
			return _nearbyMasjid;
		}
	}

	@Override
	public void setNearbyMasjid(String nearbyMasjid) {
		_nearbyMasjid = nearbyMasjid;
	}

	@JSON
	@Override
	public int getEducation() {
		return _education;
	}

	@Override
	public void setEducation(int education) {
		_education = education;
	}

	@JSON
	@Override
	public String getEducationDetail() {
		if (_educationDetail == null) {
			return StringPool.BLANK;
		}
		else {
			return _educationDetail;
		}
	}

	@Override
	public void setEducationDetail(String educationDetail) {
		_educationDetail = educationDetail;
	}

	@JSON
	@Override
	public int getReligiousEducation() {
		return _religiousEducation;
	}

	@Override
	public void setReligiousEducation(int religiousEducation) {
		_religiousEducation = religiousEducation;
	}

	@JSON
	@Override
	public String getReligiousEducationDetail() {
		if (_religiousEducationDetail == null) {
			return StringPool.BLANK;
		}
		else {
			return _religiousEducationDetail;
		}
	}

	@Override
	public void setReligiousEducationDetail(String religiousEducationDetail) {
		_religiousEducationDetail = religiousEducationDetail;
	}

	@JSON
	@Override
	public int getProfession() {
		return _profession;
	}

	@Override
	public void setProfession(int profession) {
		_profession = profession;
	}

	@JSON
	@Override
	public String getProfessionDetail() {
		if (_professionDetail == null) {
			return StringPool.BLANK;
		}
		else {
			return _professionDetail;
		}
	}

	@Override
	public void setProfessionDetail(String professionDetail) {
		_professionDetail = professionDetail;
	}

	@JSON
	@Override
	public String getOrganization() {
		if (_organization == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization;
		}
	}

	@Override
	public void setOrganization(String organization) {
		_organization = organization;
	}

	@JSON
	@Override
	public int getCurrency() {
		return _currency;
	}

	@Override
	public void setCurrency(int currency) {
		_currency = currency;
	}

	@JSON
	@Override
	public int getMonthlyIncome() {
		return _monthlyIncome;
	}

	@Override
	public void setMonthlyIncome(int monthlyIncome) {
		_monthlyIncome = monthlyIncome;
	}

	@JSON
	@Override
	public long getCountryOfBirth() {
		return _countryOfBirth;
	}

	@Override
	public void setCountryOfBirth(long countryOfBirth) {
		_countryOfBirth = countryOfBirth;
	}

	@JSON
	@Override
	public long getStateOfBirth() {
		return _stateOfBirth;
	}

	@Override
	public void setStateOfBirth(long stateOfBirth) {
		_stateOfBirth = stateOfBirth;
	}

	@JSON
	@Override
	public long getCityOfBirth() {
		return _cityOfBirth;
	}

	@Override
	public void setCityOfBirth(long cityOfBirth) {
		_cityOfBirth = cityOfBirth;
	}

	@JSON
	@Override
	public int getCommunity() {
		return _community;
	}

	@Override
	public void setCommunity(int community) {
		_community = community;
	}

	@JSON
	@Override
	public int getEthnicity() {
		return _ethnicity;
	}

	@Override
	public void setEthnicity(int ethnicity) {
		_ethnicity = ethnicity;
	}

	@JSON
	@Override
	public String getCanSpeak() {
		if (_canSpeak == null) {
			return StringPool.BLANK;
		}
		else {
			return _canSpeak;
		}
	}

	@Override
	public void setCanSpeak(String canSpeak) {
		_canSpeak = canSpeak;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getExpectation() {
		if (_expectation == null) {
			return StringPool.BLANK;
		}
		else {
			return _expectation;
		}
	}

	@Override
	public void setExpectation(String expectation) {
		_expectation = expectation;
	}

	@JSON
	@Override
	public String getHobbies() {
		if (_hobbies == null) {
			return StringPool.BLANK;
		}
		else {
			return _hobbies;
		}
	}

	@Override
	public void setHobbies(String hobbies) {
		_hobbies = hobbies;
	}

	@JSON
	@Override
	public boolean getPhysicallyChallenged() {
		return _physicallyChallenged;
	}

	@Override
	public boolean isPhysicallyChallenged() {
		return _physicallyChallenged;
	}

	@Override
	public void setPhysicallyChallenged(boolean physicallyChallenged) {
		_physicallyChallenged = physicallyChallenged;
	}

	@JSON
	@Override
	public String getPhysicallyChallengedDetails() {
		if (_physicallyChallengedDetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _physicallyChallengedDetails;
		}
	}

	@Override
	public void setPhysicallyChallengedDetails(
		String physicallyChallengedDetails) {
		_physicallyChallengedDetails = physicallyChallengedDetails;
	}

	@JSON
	@Override
	public boolean getPerformedHaj() {
		return _performedHaj;
	}

	@Override
	public boolean isPerformedHaj() {
		return _performedHaj;
	}

	@Override
	public void setPerformedHaj(boolean performedHaj) {
		_performedHaj = performedHaj;
	}

	@JSON
	@Override
	public boolean getRevertedToIslam() {
		return _revertedToIslam;
	}

	@Override
	public boolean isRevertedToIslam() {
		return _revertedToIslam;
	}

	@Override
	public void setRevertedToIslam(boolean revertedToIslam) {
		_revertedToIslam = revertedToIslam;
	}

	@JSON
	@Override
	public int getMuslimSince() {
		return _muslimSince;
	}

	@Override
	public void setMuslimSince(int muslimSince) {
		_muslimSince = muslimSince;
	}

	@JSON
	@Override
	public boolean getHasNoFather() {
		return _hasNoFather;
	}

	@Override
	public boolean isHasNoFather() {
		return _hasNoFather;
	}

	@Override
	public void setHasNoFather(boolean hasNoFather) {
		_hasNoFather = hasNoFather;
	}

	@JSON
	@Override
	public boolean getHasNoMother() {
		return _hasNoMother;
	}

	@Override
	public boolean isHasNoMother() {
		return _hasNoMother;
	}

	@Override
	public void setHasNoMother(boolean hasNoMother) {
		_hasNoMother = hasNoMother;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Profile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Profile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Profile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProfileImpl profileImpl = new ProfileImpl();

		profileImpl.setProfileId(getProfileId());
		profileImpl.setCompanyId(getCompanyId());
		profileImpl.setUserId(getUserId());
		profileImpl.setUserName(getUserName());
		profileImpl.setCreateDate(getCreateDate());
		profileImpl.setModifiedDate(getModifiedDate());
		profileImpl.setGroupId(getGroupId());
		profileImpl.setOwnerLastLogin(getOwnerLastLogin());
		profileImpl.setCreatedFor(getCreatedFor());
		profileImpl.setProfileName(getProfileName());
		profileImpl.setProfileCode(getProfileCode());
		profileImpl.setBride(getBride());
		profileImpl.setMaritalStatus(getMaritalStatus());
		profileImpl.setBornOn(getBornOn());
		profileImpl.setReMarriageReasons(getReMarriageReasons());
		profileImpl.setHasChildren(getHasChildren());
		profileImpl.setSons(getSons());
		profileImpl.setDaughters(getDaughters());
		profileImpl.setHeight(getHeight());
		profileImpl.setWeight(getWeight());
		profileImpl.setComplexion(getComplexion());
		profileImpl.setMotherTongue(getMotherTongue());
		profileImpl.setEmailAddress(getEmailAddress());
		profileImpl.setPhone1(getPhone1());
		profileImpl.setPhone2(getPhone2());
		profileImpl.setResidingCountry(getResidingCountry());
		profileImpl.setResidingState(getResidingState());
		profileImpl.setResidingCity(getResidingCity());
		profileImpl.setResidingArea(getResidingArea());
		profileImpl.setNearbyMasjid(getNearbyMasjid());
		profileImpl.setEducation(getEducation());
		profileImpl.setEducationDetail(getEducationDetail());
		profileImpl.setReligiousEducation(getReligiousEducation());
		profileImpl.setReligiousEducationDetail(getReligiousEducationDetail());
		profileImpl.setProfession(getProfession());
		profileImpl.setProfessionDetail(getProfessionDetail());
		profileImpl.setOrganization(getOrganization());
		profileImpl.setCurrency(getCurrency());
		profileImpl.setMonthlyIncome(getMonthlyIncome());
		profileImpl.setCountryOfBirth(getCountryOfBirth());
		profileImpl.setStateOfBirth(getStateOfBirth());
		profileImpl.setCityOfBirth(getCityOfBirth());
		profileImpl.setCommunity(getCommunity());
		profileImpl.setEthnicity(getEthnicity());
		profileImpl.setCanSpeak(getCanSpeak());
		profileImpl.setDescription(getDescription());
		profileImpl.setExpectation(getExpectation());
		profileImpl.setHobbies(getHobbies());
		profileImpl.setPhysicallyChallenged(getPhysicallyChallenged());
		profileImpl.setPhysicallyChallengedDetails(getPhysicallyChallengedDetails());
		profileImpl.setPerformedHaj(getPerformedHaj());
		profileImpl.setRevertedToIslam(getRevertedToIslam());
		profileImpl.setMuslimSince(getMuslimSince());
		profileImpl.setHasNoFather(getHasNoFather());
		profileImpl.setHasNoMother(getHasNoMother());
		profileImpl.setStatus(getStatus());

		profileImpl.resetOriginalValues();

		return profileImpl;
	}

	@Override
	public int compareTo(Profile profile) {
		long primaryKey = profile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Profile)) {
			return false;
		}

		Profile profile = (Profile)obj;

		long primaryKey = profile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProfileModelImpl profileModelImpl = this;

		profileModelImpl._originalUserId = profileModelImpl._userId;

		profileModelImpl._setOriginalUserId = false;

		profileModelImpl._originalEmailAddress = profileModelImpl._emailAddress;

		profileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Profile> toCacheModel() {
		ProfileCacheModel profileCacheModel = new ProfileCacheModel();

		profileCacheModel.profileId = getProfileId();

		profileCacheModel.companyId = getCompanyId();

		profileCacheModel.userId = getUserId();

		profileCacheModel.userName = getUserName();

		String userName = profileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			profileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			profileCacheModel.createDate = createDate.getTime();
		}
		else {
			profileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			profileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			profileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		profileCacheModel.groupId = getGroupId();

		Date ownerLastLogin = getOwnerLastLogin();

		if (ownerLastLogin != null) {
			profileCacheModel.ownerLastLogin = ownerLastLogin.getTime();
		}
		else {
			profileCacheModel.ownerLastLogin = Long.MIN_VALUE;
		}

		profileCacheModel.createdFor = getCreatedFor();

		profileCacheModel.profileName = getProfileName();

		String profileName = profileCacheModel.profileName;

		if ((profileName != null) && (profileName.length() == 0)) {
			profileCacheModel.profileName = null;
		}

		profileCacheModel.profileCode = getProfileCode();

		String profileCode = profileCacheModel.profileCode;

		if ((profileCode != null) && (profileCode.length() == 0)) {
			profileCacheModel.profileCode = null;
		}

		profileCacheModel.bride = getBride();

		profileCacheModel.maritalStatus = getMaritalStatus();

		profileCacheModel.bornOn = getBornOn();

		profileCacheModel.reMarriageReasons = getReMarriageReasons();

		String reMarriageReasons = profileCacheModel.reMarriageReasons;

		if ((reMarriageReasons != null) && (reMarriageReasons.length() == 0)) {
			profileCacheModel.reMarriageReasons = null;
		}

		profileCacheModel.hasChildren = getHasChildren();

		profileCacheModel.sons = getSons();

		profileCacheModel.daughters = getDaughters();

		profileCacheModel.height = getHeight();

		profileCacheModel.weight = getWeight();

		profileCacheModel.complexion = getComplexion();

		profileCacheModel.motherTongue = getMotherTongue();

		profileCacheModel.emailAddress = getEmailAddress();

		String emailAddress = profileCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			profileCacheModel.emailAddress = null;
		}

		profileCacheModel.phone1 = getPhone1();

		String phone1 = profileCacheModel.phone1;

		if ((phone1 != null) && (phone1.length() == 0)) {
			profileCacheModel.phone1 = null;
		}

		profileCacheModel.phone2 = getPhone2();

		String phone2 = profileCacheModel.phone2;

		if ((phone2 != null) && (phone2.length() == 0)) {
			profileCacheModel.phone2 = null;
		}

		profileCacheModel.residingCountry = getResidingCountry();

		profileCacheModel.residingState = getResidingState();

		profileCacheModel.residingCity = getResidingCity();

		profileCacheModel.residingArea = getResidingArea();

		String residingArea = profileCacheModel.residingArea;

		if ((residingArea != null) && (residingArea.length() == 0)) {
			profileCacheModel.residingArea = null;
		}

		profileCacheModel.nearbyMasjid = getNearbyMasjid();

		String nearbyMasjid = profileCacheModel.nearbyMasjid;

		if ((nearbyMasjid != null) && (nearbyMasjid.length() == 0)) {
			profileCacheModel.nearbyMasjid = null;
		}

		profileCacheModel.education = getEducation();

		profileCacheModel.educationDetail = getEducationDetail();

		String educationDetail = profileCacheModel.educationDetail;

		if ((educationDetail != null) && (educationDetail.length() == 0)) {
			profileCacheModel.educationDetail = null;
		}

		profileCacheModel.religiousEducation = getReligiousEducation();

		profileCacheModel.religiousEducationDetail = getReligiousEducationDetail();

		String religiousEducationDetail = profileCacheModel.religiousEducationDetail;

		if ((religiousEducationDetail != null) &&
				(religiousEducationDetail.length() == 0)) {
			profileCacheModel.religiousEducationDetail = null;
		}

		profileCacheModel.profession = getProfession();

		profileCacheModel.professionDetail = getProfessionDetail();

		String professionDetail = profileCacheModel.professionDetail;

		if ((professionDetail != null) && (professionDetail.length() == 0)) {
			profileCacheModel.professionDetail = null;
		}

		profileCacheModel.organization = getOrganization();

		String organization = profileCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			profileCacheModel.organization = null;
		}

		profileCacheModel.currency = getCurrency();

		profileCacheModel.monthlyIncome = getMonthlyIncome();

		profileCacheModel.countryOfBirth = getCountryOfBirth();

		profileCacheModel.stateOfBirth = getStateOfBirth();

		profileCacheModel.cityOfBirth = getCityOfBirth();

		profileCacheModel.community = getCommunity();

		profileCacheModel.ethnicity = getEthnicity();

		profileCacheModel.canSpeak = getCanSpeak();

		String canSpeak = profileCacheModel.canSpeak;

		if ((canSpeak != null) && (canSpeak.length() == 0)) {
			profileCacheModel.canSpeak = null;
		}

		profileCacheModel.description = getDescription();

		String description = profileCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			profileCacheModel.description = null;
		}

		profileCacheModel.expectation = getExpectation();

		String expectation = profileCacheModel.expectation;

		if ((expectation != null) && (expectation.length() == 0)) {
			profileCacheModel.expectation = null;
		}

		profileCacheModel.hobbies = getHobbies();

		String hobbies = profileCacheModel.hobbies;

		if ((hobbies != null) && (hobbies.length() == 0)) {
			profileCacheModel.hobbies = null;
		}

		profileCacheModel.physicallyChallenged = getPhysicallyChallenged();

		profileCacheModel.physicallyChallengedDetails = getPhysicallyChallengedDetails();

		String physicallyChallengedDetails = profileCacheModel.physicallyChallengedDetails;

		if ((physicallyChallengedDetails != null) &&
				(physicallyChallengedDetails.length() == 0)) {
			profileCacheModel.physicallyChallengedDetails = null;
		}

		profileCacheModel.performedHaj = getPerformedHaj();

		profileCacheModel.revertedToIslam = getRevertedToIslam();

		profileCacheModel.muslimSince = getMuslimSince();

		profileCacheModel.hasNoFather = getHasNoFather();

		profileCacheModel.hasNoMother = getHasNoMother();

		profileCacheModel.status = getStatus();

		return profileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(113);

		sb.append("{profileId=");
		sb.append(getProfileId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", ownerLastLogin=");
		sb.append(getOwnerLastLogin());
		sb.append(", createdFor=");
		sb.append(getCreatedFor());
		sb.append(", profileName=");
		sb.append(getProfileName());
		sb.append(", profileCode=");
		sb.append(getProfileCode());
		sb.append(", bride=");
		sb.append(getBride());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", bornOn=");
		sb.append(getBornOn());
		sb.append(", reMarriageReasons=");
		sb.append(getReMarriageReasons());
		sb.append(", hasChildren=");
		sb.append(getHasChildren());
		sb.append(", sons=");
		sb.append(getSons());
		sb.append(", daughters=");
		sb.append(getDaughters());
		sb.append(", height=");
		sb.append(getHeight());
		sb.append(", weight=");
		sb.append(getWeight());
		sb.append(", complexion=");
		sb.append(getComplexion());
		sb.append(", motherTongue=");
		sb.append(getMotherTongue());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", phone1=");
		sb.append(getPhone1());
		sb.append(", phone2=");
		sb.append(getPhone2());
		sb.append(", residingCountry=");
		sb.append(getResidingCountry());
		sb.append(", residingState=");
		sb.append(getResidingState());
		sb.append(", residingCity=");
		sb.append(getResidingCity());
		sb.append(", residingArea=");
		sb.append(getResidingArea());
		sb.append(", nearbyMasjid=");
		sb.append(getNearbyMasjid());
		sb.append(", education=");
		sb.append(getEducation());
		sb.append(", educationDetail=");
		sb.append(getEducationDetail());
		sb.append(", religiousEducation=");
		sb.append(getReligiousEducation());
		sb.append(", religiousEducationDetail=");
		sb.append(getReligiousEducationDetail());
		sb.append(", profession=");
		sb.append(getProfession());
		sb.append(", professionDetail=");
		sb.append(getProfessionDetail());
		sb.append(", organization=");
		sb.append(getOrganization());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", monthlyIncome=");
		sb.append(getMonthlyIncome());
		sb.append(", countryOfBirth=");
		sb.append(getCountryOfBirth());
		sb.append(", stateOfBirth=");
		sb.append(getStateOfBirth());
		sb.append(", cityOfBirth=");
		sb.append(getCityOfBirth());
		sb.append(", community=");
		sb.append(getCommunity());
		sb.append(", ethnicity=");
		sb.append(getEthnicity());
		sb.append(", canSpeak=");
		sb.append(getCanSpeak());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", expectation=");
		sb.append(getExpectation());
		sb.append(", hobbies=");
		sb.append(getHobbies());
		sb.append(", physicallyChallenged=");
		sb.append(getPhysicallyChallenged());
		sb.append(", physicallyChallengedDetails=");
		sb.append(getPhysicallyChallengedDetails());
		sb.append(", performedHaj=");
		sb.append(getPerformedHaj());
		sb.append(", revertedToIslam=");
		sb.append(getRevertedToIslam());
		sb.append(", muslimSince=");
		sb.append(getMuslimSince());
		sb.append(", hasNoFather=");
		sb.append(getHasNoFather());
		sb.append(", hasNoMother=");
		sb.append(getHasNoMother());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(172);

		sb.append("<model><model-name>");
		sb.append("com.inikah.slayer.model.Profile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>profileId</column-name><column-value><![CDATA[");
		sb.append(getProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerLastLogin</column-name><column-value><![CDATA[");
		sb.append(getOwnerLastLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdFor</column-name><column-value><![CDATA[");
		sb.append(getCreatedFor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileName</column-name><column-value><![CDATA[");
		sb.append(getProfileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileCode</column-name><column-value><![CDATA[");
		sb.append(getProfileCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bride</column-name><column-value><![CDATA[");
		sb.append(getBride());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bornOn</column-name><column-value><![CDATA[");
		sb.append(getBornOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reMarriageReasons</column-name><column-value><![CDATA[");
		sb.append(getReMarriageReasons());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasChildren</column-name><column-value><![CDATA[");
		sb.append(getHasChildren());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sons</column-name><column-value><![CDATA[");
		sb.append(getSons());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>daughters</column-name><column-value><![CDATA[");
		sb.append(getDaughters());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>height</column-name><column-value><![CDATA[");
		sb.append(getHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weight</column-name><column-value><![CDATA[");
		sb.append(getWeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complexion</column-name><column-value><![CDATA[");
		sb.append(getComplexion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>motherTongue</column-name><column-value><![CDATA[");
		sb.append(getMotherTongue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone1</column-name><column-value><![CDATA[");
		sb.append(getPhone1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone2</column-name><column-value><![CDATA[");
		sb.append(getPhone2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>residingCountry</column-name><column-value><![CDATA[");
		sb.append(getResidingCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>residingState</column-name><column-value><![CDATA[");
		sb.append(getResidingState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>residingCity</column-name><column-value><![CDATA[");
		sb.append(getResidingCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>residingArea</column-name><column-value><![CDATA[");
		sb.append(getResidingArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nearbyMasjid</column-name><column-value><![CDATA[");
		sb.append(getNearbyMasjid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>education</column-name><column-value><![CDATA[");
		sb.append(getEducation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>educationDetail</column-name><column-value><![CDATA[");
		sb.append(getEducationDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>religiousEducation</column-name><column-value><![CDATA[");
		sb.append(getReligiousEducation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>religiousEducationDetail</column-name><column-value><![CDATA[");
		sb.append(getReligiousEducationDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profession</column-name><column-value><![CDATA[");
		sb.append(getProfession());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>professionDetail</column-name><column-value><![CDATA[");
		sb.append(getProfessionDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization</column-name><column-value><![CDATA[");
		sb.append(getOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>monthlyIncome</column-name><column-value><![CDATA[");
		sb.append(getMonthlyIncome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryOfBirth</column-name><column-value><![CDATA[");
		sb.append(getCountryOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getStateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityOfBirth</column-name><column-value><![CDATA[");
		sb.append(getCityOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>community</column-name><column-value><![CDATA[");
		sb.append(getCommunity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ethnicity</column-name><column-value><![CDATA[");
		sb.append(getEthnicity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>canSpeak</column-name><column-value><![CDATA[");
		sb.append(getCanSpeak());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectation</column-name><column-value><![CDATA[");
		sb.append(getExpectation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hobbies</column-name><column-value><![CDATA[");
		sb.append(getHobbies());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>physicallyChallenged</column-name><column-value><![CDATA[");
		sb.append(getPhysicallyChallenged());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>physicallyChallengedDetails</column-name><column-value><![CDATA[");
		sb.append(getPhysicallyChallengedDetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>performedHaj</column-name><column-value><![CDATA[");
		sb.append(getPerformedHaj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>revertedToIslam</column-name><column-value><![CDATA[");
		sb.append(getRevertedToIslam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>muslimSince</column-name><column-value><![CDATA[");
		sb.append(getMuslimSince());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasNoFather</column-name><column-value><![CDATA[");
		sb.append(getHasNoFather());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasNoMother</column-name><column-value><![CDATA[");
		sb.append(getHasNoMother());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Profile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Profile.class
		};
	private long _profileId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _groupId;
	private Date _ownerLastLogin;
	private int _createdFor;
	private String _profileName;
	private String _profileCode;
	private boolean _bride;
	private int _maritalStatus;
	private int _bornOn;
	private String _reMarriageReasons;
	private boolean _hasChildren;
	private int _sons;
	private int _daughters;
	private int _height;
	private int _weight;
	private int _complexion;
	private int _motherTongue;
	private String _emailAddress;
	private String _originalEmailAddress;
	private String _phone1;
	private String _phone2;
	private long _residingCountry;
	private long _residingState;
	private long _residingCity;
	private String _residingArea;
	private String _nearbyMasjid;
	private int _education;
	private String _educationDetail;
	private int _religiousEducation;
	private String _religiousEducationDetail;
	private int _profession;
	private String _professionDetail;
	private String _organization;
	private int _currency;
	private int _monthlyIncome;
	private long _countryOfBirth;
	private long _stateOfBirth;
	private long _cityOfBirth;
	private int _community;
	private int _ethnicity;
	private String _canSpeak;
	private String _description;
	private String _expectation;
	private String _hobbies;
	private boolean _physicallyChallenged;
	private String _physicallyChallengedDetails;
	private boolean _performedHaj;
	private boolean _revertedToIslam;
	private int _muslimSince;
	private boolean _hasNoFather;
	private boolean _hasNoMother;
	private int _status;
	private long _columnBitmask;
	private Profile _escapedModel;
}