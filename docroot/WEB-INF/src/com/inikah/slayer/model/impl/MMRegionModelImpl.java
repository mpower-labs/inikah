/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inikah.slayer.model.impl;

import com.inikah.slayer.model.MMRegion;
import com.inikah.slayer.model.MMRegionModel;
import com.inikah.slayer.model.MMRegionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MMRegion service. Represents a row in the &quot;inikah_MMRegion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.inikah.slayer.model.MMRegionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MMRegionImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see MMRegionImpl
 * @see com.inikah.slayer.model.MMRegion
 * @see com.inikah.slayer.model.MMRegionModel
 * @generated
 */
@JSON(strict = true)
public class MMRegionModelImpl extends BaseModelImpl<MMRegion>
	implements MMRegionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a m m region model instance should use the {@link com.inikah.slayer.model.MMRegion} interface instead.
	 */
	public static final String TABLE_NAME = "inikah_MMRegion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "regionId", Types.BIGINT },
			{ "countryId", Types.BIGINT },
			{ "isoCode", Types.VARCHAR },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table inikah_MMRegion (regionId LONG not null primary key,countryId LONG,isoCode VARCHAR(75) null,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table inikah_MMRegion";
	public static final String ORDER_BY_JPQL = " ORDER BY mmRegion.regionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY inikah_MMRegion.regionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.inikah.slayer.model.MMRegion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.inikah.slayer.model.MMRegion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.inikah.slayer.model.MMRegion"),
			true);
	public static long COUNTRYID_COLUMN_BITMASK = 1L;
	public static long ISOCODE_COLUMN_BITMASK = 2L;
	public static long REGIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MMRegion toModel(MMRegionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MMRegion model = new MMRegionImpl();

		model.setRegionId(soapModel.getRegionId());
		model.setCountryId(soapModel.getCountryId());
		model.setIsoCode(soapModel.getIsoCode());
		model.setName(soapModel.getName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MMRegion> toModels(MMRegionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MMRegion> models = new ArrayList<MMRegion>(soapModels.length);

		for (MMRegionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.inikah.slayer.model.MMRegion"));

	public MMRegionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _regionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _regionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MMRegion.class;
	}

	@Override
	public String getModelClassName() {
		return MMRegion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("regionId", getRegionId());
		attributes.put("countryId", getCountryId());
		attributes.put("isoCode", getIsoCode());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String isoCode = (String)attributes.get("isoCode");

		if (isoCode != null) {
			setIsoCode(isoCode);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@JSON
	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_columnBitmask |= COUNTRYID_COLUMN_BITMASK;

		if (!_setOriginalCountryId) {
			_setOriginalCountryId = true;

			_originalCountryId = _countryId;
		}

		_countryId = countryId;
	}

	public long getOriginalCountryId() {
		return _originalCountryId;
	}

	@JSON
	@Override
	public String getIsoCode() {
		if (_isoCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _isoCode;
		}
	}

	@Override
	public void setIsoCode(String isoCode) {
		_columnBitmask |= ISOCODE_COLUMN_BITMASK;

		if (_originalIsoCode == null) {
			_originalIsoCode = _isoCode;
		}

		_isoCode = isoCode;
	}

	public String getOriginalIsoCode() {
		return GetterUtil.getString(_originalIsoCode);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MMRegion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MMRegion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MMRegion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MMRegionImpl mmRegionImpl = new MMRegionImpl();

		mmRegionImpl.setRegionId(getRegionId());
		mmRegionImpl.setCountryId(getCountryId());
		mmRegionImpl.setIsoCode(getIsoCode());
		mmRegionImpl.setName(getName());

		mmRegionImpl.resetOriginalValues();

		return mmRegionImpl;
	}

	@Override
	public int compareTo(MMRegion mmRegion) {
		long primaryKey = mmRegion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MMRegion)) {
			return false;
		}

		MMRegion mmRegion = (MMRegion)obj;

		long primaryKey = mmRegion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MMRegionModelImpl mmRegionModelImpl = this;

		mmRegionModelImpl._originalCountryId = mmRegionModelImpl._countryId;

		mmRegionModelImpl._setOriginalCountryId = false;

		mmRegionModelImpl._originalIsoCode = mmRegionModelImpl._isoCode;

		mmRegionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MMRegion> toCacheModel() {
		MMRegionCacheModel mmRegionCacheModel = new MMRegionCacheModel();

		mmRegionCacheModel.regionId = getRegionId();

		mmRegionCacheModel.countryId = getCountryId();

		mmRegionCacheModel.isoCode = getIsoCode();

		String isoCode = mmRegionCacheModel.isoCode;

		if ((isoCode != null) && (isoCode.length() == 0)) {
			mmRegionCacheModel.isoCode = null;
		}

		mmRegionCacheModel.name = getName();

		String name = mmRegionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			mmRegionCacheModel.name = null;
		}

		return mmRegionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{regionId=");
		sb.append(getRegionId());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", isoCode=");
		sb.append(getIsoCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.inikah.slayer.model.MMRegion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isoCode</column-name><column-value><![CDATA[");
		sb.append(getIsoCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MMRegion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MMRegion.class
		};
	private long _regionId;
	private long _countryId;
	private long _originalCountryId;
	private boolean _setOriginalCountryId;
	private String _isoCode;
	private String _originalIsoCode;
	private String _name;
	private long _columnBitmask;
	private MMRegion _escapedModel;
}