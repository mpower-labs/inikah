/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inikah.slayer.model.impl;

import com.inikah.slayer.model.MMCity;
import com.inikah.slayer.model.MMCityModel;
import com.inikah.slayer.model.MMCitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MMCity service. Represents a row in the &quot;inikah_MMCity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.inikah.slayer.model.MMCityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MMCityImpl}.
 * </p>
 *
 * @author Ahmed Hasan
 * @see MMCityImpl
 * @see com.inikah.slayer.model.MMCity
 * @see com.inikah.slayer.model.MMCityModel
 * @generated
 */
@JSON(strict = true)
public class MMCityModelImpl extends BaseModelImpl<MMCity>
	implements MMCityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a m m city model instance should use the {@link com.inikah.slayer.model.MMCity} interface instead.
	 */
	public static final String TABLE_NAME = "inikah_MMCity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cityId", Types.BIGINT },
			{ "regionId", Types.BIGINT },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table inikah_MMCity (cityId LONG not null primary key,regionId LONG,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table inikah_MMCity";
	public static final String ORDER_BY_JPQL = " ORDER BY mmCity.cityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY inikah_MMCity.cityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.inikah.slayer.model.MMCity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.inikah.slayer.model.MMCity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.inikah.slayer.model.MMCity"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static long REGIONID_COLUMN_BITMASK = 2L;
	public static long CITYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MMCity toModel(MMCitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MMCity model = new MMCityImpl();

		model.setCityId(soapModel.getCityId());
		model.setRegionId(soapModel.getRegionId());
		model.setName(soapModel.getName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MMCity> toModels(MMCitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MMCity> models = new ArrayList<MMCity>(soapModels.length);

		for (MMCitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.inikah.slayer.model.MMCity"));

	public MMCityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MMCity.class;
	}

	@Override
	public String getModelClassName() {
		return MMCity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cityId", getCityId());
		attributes.put("regionId", getRegionId());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cityId = (Long)attributes.get("cityId");

		if (cityId != null) {
			setCityId(cityId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@JSON
	@Override
	public long getCityId() {
		return _cityId;
	}

	@Override
	public void setCityId(long cityId) {
		_cityId = cityId;
	}

	@JSON
	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MMCity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MMCity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MMCity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MMCityImpl mmCityImpl = new MMCityImpl();

		mmCityImpl.setCityId(getCityId());
		mmCityImpl.setRegionId(getRegionId());
		mmCityImpl.setName(getName());

		mmCityImpl.resetOriginalValues();

		return mmCityImpl;
	}

	@Override
	public int compareTo(MMCity mmCity) {
		long primaryKey = mmCity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MMCity)) {
			return false;
		}

		MMCity mmCity = (MMCity)obj;

		long primaryKey = mmCity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MMCityModelImpl mmCityModelImpl = this;

		mmCityModelImpl._originalRegionId = mmCityModelImpl._regionId;

		mmCityModelImpl._setOriginalRegionId = false;

		mmCityModelImpl._originalName = mmCityModelImpl._name;

		mmCityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MMCity> toCacheModel() {
		MMCityCacheModel mmCityCacheModel = new MMCityCacheModel();

		mmCityCacheModel.cityId = getCityId();

		mmCityCacheModel.regionId = getRegionId();

		mmCityCacheModel.name = getName();

		String name = mmCityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			mmCityCacheModel.name = null;
		}

		return mmCityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{cityId=");
		sb.append(getCityId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.inikah.slayer.model.MMCity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cityId</column-name><column-value><![CDATA[");
		sb.append(getCityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MMCity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { MMCity.class };
	private long _cityId;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _name;
	private String _originalName;
	private long _columnBitmask;
	private MMCity _escapedModel;
}